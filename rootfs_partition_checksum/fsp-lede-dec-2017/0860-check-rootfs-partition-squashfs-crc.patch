--- a/init/main.c
+++ b/init/main.c
@@ -78,6 +78,10 @@
 #include <linux/context_tracking.h>
 #include <linux/random.h>
 #include <linux/list.h>
+#include <linux/gpio.h>
+#include <linux/crc32.h>
+#include <linux/mtd/mtd.h>
+#include <linux/of.h>
 
 #include <asm/io.h>
 #include <asm/bugs.h>
@@ -98,6 +102,20 @@ extern void radix_tree_init(void);
 static inline void mark_rodata_ro(void) { }
 #endif
 
+/* 
+ * Due to low RAM availability during kernel init, split up
+ * incoming squashfs file into chunks for crc 17jan20sm 
+ */
+#define CRC_BLOCK_SIZE 512
+
+/*
+ * this is the "type" we choose for our uboot image. If we
+ * change the format of the firmware image, skip the userspace crc check
+ * since the layout of the uImage is likely to be different.
+ */
+#define IH_TYPE_KERNEL 2
+
 /*
  * Debug helper: via this flag we know that we are in 'early bootup code'
  * where only the boot processor is running with IRQ disabled.  This means
@@ -132,6 +150,14 @@ static char *initcall_command_line;
 static char *execute_command;
 static char *ramdisk_execute_command;
 
+/* 
+ * Reading from /dev/mtd5 is a piece of cake...
+ * Writing to to /dev/mtd9 is a bit trickier, 
+ * and requires some explicit help from the mtd
+ * driver.
+ */
+static struct mtd_info* mtd9_info = NULL;
+
 /*
  * Used to generate warnings if static_key manipulation functions are used
  * before jump_label_init is called.
@@ -950,6 +976,213 @@ static int try_to_run_init_process(const
 	return ret;
 }
 
+static bool should_do_squashfs_crc_check(const char* command_line)
+{
+	/*
+	 * If bootargs contain 'squashfs_crc=1'
+	 * and if gpio pins are telling us everything is ok,
+	 * then we want to check userspace processes before booting into them.
+	 * The crc takes about 6 seconds on my processor.
+	 * The pin in question is active low.
+	 * Developers will have to replace the pin name.
+	 */
+	struct device_node* factory_test_node;
+	unsigned int pvalues[3];
+	unsigned int factory_test_gpio;
+	int factory_test_value;
+	
+	factory_test_node = of_find_node_by_name(NULL, "replace_me_with_gpio_name");
+	if(factory_test_node)
+	{
+		if(!of_property_read_u32_array(factory_test_node, "gpios", pvalues, 3))
+		{
+			factory_test_gpio = (pvalues[0] >> 4) * 32 + pvalues[1];
+			factory_test_value = gpio_get_value(factory_test_gpio);
+			if(factory_test_value != -EINVAL)
+			{
+				return (factory_test_value == pvalues[2]) && strstr(command_line, "squashfs_crc=1");
+			}
+		}	
+	}
+	return false;
+}
+
+void erase_callback(struct erase_info *instr) 
+{
+    wake_up((wait_queue_head_t *)instr->priv);
+}
+
+static int squashfs_crc_check(void)
+{
+	unsigned char image_type_char;
+	unsigned char image_size_string[4];
+	unsigned char squashfs_blob_size_string[4];
+	unsigned char squashfs_blob_crc_string[4];
+	unsigned char chunk_for_crc[CRC_BLOCK_SIZE];
+	
+	unsigned int image_size_uint;
+	unsigned int squashfs_blob_size_uint;
+	unsigned int squashfs_blob_crc_uint;
+	unsigned int running_crc;
+
+	int mtd5_fd;
+
+	unsigned int mtd9_offset;
+	int erase_ret;
+	struct erase_info ei = {0};
+	wait_queue_head_t waitq;
+	size_t bytes_written;
+	unsigned int write_offset;
+
+	char oops_header_plus_message[71];
+
+	mtd5_fd = sys_open("/dev/mtdblock5", O_RDONLY, 0);
+	if(mtd5_fd == -1)
+	{
+		panic("/dev/mtdblock5 cannot be opened\n");
+	}
+
+	/* 
+	 * Parse linux image size, type, and squashfs size and crc from uImage header
+	 */
+	sys_lseek(mtd5_fd, 12, SEEK_SET);
+	sys_read(mtd5_fd, image_size_string, 4);
+	sys_lseek(mtd5_fd, 14, SEEK_CUR);
+	sys_read(mtd5_fd, &image_type_char, 1);
+	sys_lseek(mtd5_fd, 25, SEEK_CUR);
+	/*
+	 * Sanity check that we haven't changed the uImage type
+	 * which would mean that linux + squashfs structure would have changed
+	 */
+	if(image_type_char == IH_TYPE_KERNEL)
+	{
+		sys_read(mtd5_fd, squashfs_blob_size_string, 4);
+		sys_read(mtd5_fd, squashfs_blob_crc_string, 4);
+		
+		image_size_uint = (image_size_string[0] << 24) | (image_size_string[1] << 16) | (image_size_string[2] << 8) | image_size_string[3];
+		squashfs_blob_size_uint = (squashfs_blob_size_string[0] << 24) | (squashfs_blob_size_string[1] << 16) | (squashfs_blob_size_string[2] << 8) | squashfs_blob_size_string[3];
+		squashfs_blob_crc_uint = (squashfs_blob_crc_string[0] << 24) | (squashfs_blob_crc_string[1] << 16) | (squashfs_blob_crc_string[2] << 8) | squashfs_blob_crc_string[3];
+
+		/* 
+		* file reader currently at end of uImage header, 
+		* jump to end of linux image blob (about 1.5MB)
+		* image_size_uint only corresponds to the 
+		* size of the linux image, it does NOT include
+		* the size of the uImage header
+		*/
+		sys_lseek(mtd5_fd, image_size_uint, SEEK_CUR);
+
+		/* 
+		* Calculate crc of squashfs blob, zero starting
+		* seed and no pre- or -post XOR with ~0.
+		* mkimage will use u-boot/crc.h no_comp_crc() 
+		* (also with 0 starting seed) which matches 
+		* the standard linux/crc32.h crc32() we are using
+		*/
+		sys_read(mtd5_fd, chunk_for_crc, CRC_BLOCK_SIZE);
+		running_crc = crc32(0, chunk_for_crc, CRC_BLOCK_SIZE);
+		squashfs_blob_size_uint -= CRC_BLOCK_SIZE;
+		while(squashfs_blob_size_uint > CRC_BLOCK_SIZE)
+		{
+			sys_read(mtd5_fd, chunk_for_crc, CRC_BLOCK_SIZE);
+			running_crc = crc32(running_crc, chunk_for_crc, CRC_BLOCK_SIZE);
+			squashfs_blob_size_uint -= CRC_BLOCK_SIZE;
+		}
+		sys_read(mtd5_fd, chunk_for_crc, squashfs_blob_size_uint);
+		running_crc = crc32(running_crc, chunk_for_crc, squashfs_blob_size_uint);
+
+		sys_close(mtd5_fd);
+
+		if(running_crc != squashfs_blob_crc_uint)
+		{
+			/*
+			 * uh oh... the crc's don't match...
+			 */
+			pr_err("CRC check failure. mkimage squashfs crc: 0x%X calculated squashfs crc: 0x%X\n", 
+				running_crc, 
+				squashfs_blob_crc_uint
+				);
+
+			mtd9_info = get_mtd_device(NULL, 9);
+			
+			/*
+			 * mtd operations at the kernel level may sleep.
+			 * The following block ensures that the erase completes
+			 * before we write. Also, erase all oopses before we proceed,
+			 * since we can assume that corrupted squashfs is the reason for 
+			 * any oopses currently logged.
+			 */
+			for(mtd9_offset = 0; mtd9_offset < mtd9_info->size; mtd9_offset += mtd9_info->erasesize)
+			{
+				DECLARE_WAITQUEUE(wait, current);
+    			init_waitqueue_head(&waitq);
+    			ei.addr = mtd9_offset;
+    			ei.len = mtd9_info->erasesize;
+    			ei.mtd = mtd9_info;
+    			ei.callback = erase_callback;
+    			ei.priv = (unsigned long)&waitq;
+    			erase_ret = mtd_erase(mtd9_info, &ei);
+    			if(!erase_ret)
+				{
+        			set_current_state(TASK_UNINTERRUPTIBLE);
+        			add_wait_queue(&waitq, &wait);
+        			if (ei.state != MTD_ERASE_DONE && ei.state != MTD_ERASE_FAILED)
+            		schedule();
+        			remove_wait_queue(&waitq, &wait);
+        			set_current_state(TASK_RUNNING);
+        			erase_ret = (ei.state == MTD_ERASE_FAILED)?-EIO:0;
+    			}
+			}
+    		
+			/*
+			 * The oops driver can erase a page that does not contain a header at any of its 0x1000 boundaries.
+			 * the header consists of a 4 byte oops index followed by the big endian magic 0x5d005d00.
+			 * On top of this, there is a bug in the mtdoops driver (https://patchwork.ozlabs.org/patch/192736/)
+			 * that erases the first page of the oops partition even if it doesn't have to. Just to be safe,
+			 * we will add a spoofed oops header AND write to the second oops page (if it exists) to avoid any
+			 * complications. Header must be written to be interpreted as big endian integers
+			 * (in other words... 'hexdump /dev/mtd9' should show the first 8 bytes as 0011 0000 5d00 5d00).
+			 */
+			oops_header_plus_message[0] = 17;
+			oops_header_plus_message[1] = 0;
+			oops_header_plus_message[2] = 0;
+			oops_header_plus_message[3] = 0;
+			oops_header_plus_message[4] = 0x00;
+			oops_header_plus_message[5] = 0x5d;
+			oops_header_plus_message[6] = 0x00;
+			oops_header_plus_message[7] = 0x5d;
+			
+			strcpy(&oops_header_plus_message[8], "Instructions for services are corrupted, panicking");
+
+			/*
+			 * if oops partition size is only 1 erase block size, 
+			 * hope that the spoofed oops header works (don't worry, it will) and write to the first page
+			 */
+			if(mtd9_offset < 0x20000)
+			{
+				write_offset = 0;
+			}
+			else
+			{
+				write_offset = mtd9_info->erasesize;
+			}
+
+			/*
+			 * message len is 62 + 8 byte header -> 70 bytes must be written
+			 */
+			mtd_write(mtd9_info, write_offset, 70, &bytes_written, oops_header_plus_message);
+			
+			msleep(5000);
+			panic("Instructions for services are corrupted, panicking\n");
+		}
+		else
+		{
+			pr_notice("CRC check success.\n");
+		}
+	}
+	return 0;
+}
+
 static noinline void __init kernel_init_freeable(void);
 
 static int __ref kernel_init(void *unused)
@@ -1054,6 +1287,19 @@ static noinline void __init kernel_init_
 	 * initmem segments and start the user-mode stuff..
 	 */
 
+	/* 
+	 * ... But first - now sounds like a great time to
+	 * make sure our user processes are still intact! 
+	 * we will panic if otherwise. The mtd driver 
+	 * gets initialized in do_basic_setup(), so we can now 
+	 * read from /dev/mtd5 and write to /dev/mtd9.
+	 * 24jan20sm
+	 */
+	if(should_do_squashfs_crc_check(saved_command_line))
+	{
+		squashfs_crc_check();
+	}
+
 	/* rootfs is available now, try loading default modules */
 	load_default_modules();
 }
