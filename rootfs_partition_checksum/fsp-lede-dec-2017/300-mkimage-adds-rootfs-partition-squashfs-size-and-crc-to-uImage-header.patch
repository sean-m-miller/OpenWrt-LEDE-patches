--- a/include/image.h
+++ b/include/image.h
@@ -611,9 +611,21 @@ image_set_hdr_b(arch)		/* image_set_arch
 image_set_hdr_b(type)		/* image_set_type */
 image_set_hdr_b(comp)		/* image_set_comp */
 
-static inline void image_set_name(image_header_t *hdr, const char *name)
+static inline void image_set_name(image_header_t *hdr, const char *name, unsigned int squashfs_size, unsigned int squashfs_crc)
 {
-	strncpy(image_get_name(hdr), name, IH_NMLEN);
+	// intercept the incoming imagename and inject size + crc in last 8 bytes 23jan20sm
+	char temp[32];
+	strncpy(temp, name, 32);
+	temp[24] = (squashfs_size >> 24) & 0xFF;
+	temp[25] = (squashfs_size >> 16) & 0xFF;
+	temp[26] = (squashfs_size >> 8) & 0xFF;
+	temp[27] = squashfs_size & 0xFF;
+	temp[28] = (squashfs_crc >> 24) & 0xFF;
+	temp[29] = (squashfs_crc >> 16) & 0xFF;
+	temp[30] = (squashfs_crc >> 8) & 0xFF;
+	temp[31] = squashfs_crc & 0xFF;
+
+	memcpy(image_get_name(hdr), temp, IH_NMLEN);
 }
 
 int image_check_hcrc(const image_header_t *hdr);
--- a/tools/default_image.c
+++ b/tools/default_image.c
@@ -85,10 +85,12 @@ static int image_verify_header(unsigned 
 	return 0;
 }
 
-static void image_set_header(void *ptr, struct stat *sbuf, int ifd,
+static void image_set_header(void *ptr, void *squashfs_ptr, struct stat *sbuf, 
+				struct stat *squashfs_sbuf, int ifd, int squashfs_ifd,
 				struct image_tool_params *params)
 {
 	uint32_t checksum;
+	uint32_t squashfs_checksum;
 	char *source_date_epoch;
 	struct tm *time_universal;
 	time_t time;
@@ -99,6 +101,13 @@ static void image_set_header(void *ptr, 
 			(const unsigned char *)(ptr +
 				sizeof(image_header_t)),
 			sbuf->st_size - sizeof(image_header_t));
+	
+	if(squashfs_ptr != NULL)
+	{
+		squashfs_checksum = crc32_no_comp(0, 
+			(const unsigned char *)squashfs_ptr, 
+			squashfs_sbuf->st_size);
+	}
 
 	source_date_epoch = getenv("SOURCE_DATE_EPOCH");
 	if (source_date_epoch != NULL) {
@@ -128,7 +137,15 @@ static void image_set_header(void *ptr, 
 	image_set_type(hdr, params->type);
 	image_set_comp(hdr, params->comp);
 
-	image_set_name(hdr, params->imagename);
+	if(squashfs_ptr != NULL)
+	{
+		image_set_name(hdr, params->imagename, squashfs_sbuf->st_size, squashfs_checksum);
+	}
+	else
+	{
+		image_set_name(hdr, params->imagename, 0, 0);
+	}
+	
 
 	checksum = crc32(0, (const unsigned char *)hdr,
 				sizeof(image_header_t));
@@ -202,7 +219,7 @@ static struct image_type_params defimage
 	.check_image_type = image_check_image_types,
 	.verify_header = image_verify_header,
 	.print_header = image_print_contents,
-	.set_header = image_set_header,
+	.set_header_with_squashfs = image_set_header,
 	.extract_datafile = image_extract_datafile,
 	.check_params = image_check_params,
 };
@@ -211,3 +228,4 @@ void init_default_image_type(void)
 {
 	register_image_type(&defimage_params);
 }
+
--- a/tools/imagetool.h
+++ b/tools/imagetool.h
@@ -52,6 +52,7 @@ struct image_tool_params {
 	char *imagename;
 	char *imagename2;
 	char *datafile;
+	char *squashfsfile;
 	char *imagefile;
 	char *cmdname;
 	const char *outfile;	/* Output filename */
@@ -102,6 +103,16 @@ struct image_type_params {
 	void (*set_header) (void *, struct stat *, int,
 					struct image_tool_params *);
 	/*
+	 * 29jan20sm This is identical to the method above, except that this
+	 * version of mkimage will also use stat() and the uboot crc method 
+	 * to calculate the size of, and the 32 bit crc of the squashfs blob respectively.
+	 * These values will be added as 4-byte big endian ints to the last 8 bytes
+	 * of the uImage header (size starting at index [56], crc starting at index [60]).
+	 * A hook in the kernel boot process will verify that the squashfs crc checks out.
+	 */
+	void (*set_header_with_squashfs) (void *, void *, struct stat *, struct stat *, 
+					int, int, struct image_tool_params *);
+	/*
 	 * This function is used by the command to retrieve a data file from
 	 * the image (i.e. dumpimage -i <image> -p <position> <data_file>).
 	 * Thus the code to extract a file from an image must be put here.
@@ -176,3 +187,4 @@ void init_gpimage_type(void);
 void pbl_load_uboot(int fd, struct image_tool_params *mparams);
 
 #endif /* _IMAGETOOL_H_ */
+
--- a/tools/mkimage.c
+++ b/tools/mkimage.c
@@ -11,6 +11,7 @@
 #include "mkimage.h"
 #include <image.h>
 #include <version.h>
+#include <u-boot/crc.h>
 
 static void copy_file(int, const char *, int);
 static void usage(void);
@@ -28,6 +29,7 @@ struct image_tool_params params = {
 	.dtc = MKIMAGE_DEFAULT_DTC_OPTIONS,
 	.imagename = "",
 	.imagename2 = "",
+	.squashfsfile = "",
 };
 
 /*
@@ -134,8 +136,11 @@ int
 main (int argc, char **argv)
 {
 	int ifd = -1;
+	int squashfs_ifd = -1;
 	struct stat sbuf;
+	struct stat squashfs_sbuf;
 	char *ptr;
+	char *squashfs_ptr = NULL;
 	int retval = 0;
 	struct image_type_params *tparams = NULL;
 	int pad_len = 0;
@@ -240,6 +245,11 @@ main (int argc, char **argv)
 				params.type = IH_TYPE_FLATDT;
 				params.fflag = 1;
 				goto NXTARG;
+			case 'S':
+				if (--argc <= 0)
+					usage ();
+				params.squashfsfile = *++argv;
+				goto NXTARG;
 			case 'k':
 				if (--argc <= 0)
 					usage();
@@ -330,6 +340,7 @@ NXTARG:		;
 
 	if (params.lflag || params.fflag) {
 		ifd = open (params.imagefile, O_RDONLY|O_BINARY);
+		
 	} else {
 		ifd = open (params.imagefile,
 			O_RDWR|O_CREAT|O_TRUNC|O_BINARY, 0666);
@@ -342,6 +353,30 @@ NXTARG:		;
 		exit (EXIT_FAILURE);
 	}
 
+	// 29jan20sm for our purposes, we will always require 
+	// the squashfs size and crc in the header. This will not be portable
+	// if we ever start using different uImage formats.
+	if(strlen(params.squashfsfile))
+	{
+		squashfs_ifd = open (params.squashfsfile, O_RDONLY|O_BINARY);
+
+		if (squashfs_ifd < 0) {
+			fprintf (stderr, "Can't open squashfs file\n");
+			exit (EXIT_FAILURE);
+		}
+
+		if (fstat(squashfs_ifd, &squashfs_sbuf) < 0) {
+			fprintf (stderr, "Can't stat squashfs blob\n");
+			exit (EXIT_FAILURE);
+		}
+
+		squashfs_ptr = mmap(0, squashfs_sbuf.st_size, PROT_READ, MAP_PRIVATE, squashfs_ifd, 0);
+		if (squashfs_ptr == MAP_FAILED) {
+			fprintf (stderr, "Can't map squashfs blob\n");
+			exit (EXIT_FAILURE);
+		}
+	}
+
 	if (params.lflag || params.fflag) {
 		/*
 		 * list header information of existing image
@@ -490,8 +525,8 @@ NXTARG:		;
 	}
 
 	/* Setup the image header as per input image type*/
-	if (tparams->set_header)
-		tparams->set_header (ptr, &sbuf, ifd, &params);
+	if (tparams->set_header_with_squashfs)
+		tparams->set_header_with_squashfs (ptr, squashfs_ptr, &sbuf, &squashfs_sbuf, ifd, squashfs_ifd, &params);
 	else {
 		fprintf (stderr, "%s: Can't set header for %s: %s\n",
 			params.cmdname, tparams->name, strerror(errno));
@@ -508,6 +543,10 @@ NXTARG:		;
 	}
 
 	(void) munmap((void *)ptr, sbuf.st_size);
+	if(squashfs_ptr != NULL)
+	{
+		(void) munmap((void *)squashfs_ptr, squashfs_sbuf.st_size);
+	}
 
 	/* We're a bit of paranoid */
 #if defined(_POSIX_SYNCHRONIZED_IO) && \
@@ -525,7 +564,15 @@ NXTARG:		;
 			params.cmdname, params.imagefile, strerror(errno));
 		exit (EXIT_FAILURE);
 	}
-
+	if(squashfs_ifd != -1)
+	{
+		if (close(squashfs_ifd)) 
+		{
+			fprintf (stderr, "unable to close squashfs file");
+			exit (EXIT_FAILURE);
+		}
+	}
+	
 	exit (EXIT_SUCCESS);
 }
 
@@ -599,7 +646,6 @@ copy_file (int ifd, const char *datafile
 
 		offset = tparams->header_size;
 	}
-
 	size = sbuf.st_size - offset;
 	if (write(ifd, ptr + offset, size) != size) {
 		fprintf (stderr, "%s: Write error on %s: %s\n",
@@ -609,7 +655,6 @@ copy_file (int ifd, const char *datafile
 
 	tail = size % 4;
 	if ((pad == 1) && (tail != 0)) {
-
 		if (write(ifd, (char *)&zero, 4-tail) != 4-tail) {
 			fprintf (stderr, "%s: Write error on %s: %s\n",
 				params.cmdname, params.imagefile,
@@ -635,7 +680,7 @@ static void usage(void)
 			 "          -l ==> list image header information\n",
 		params.cmdname);
 	fprintf (stderr, "       %s [-x] -A arch -O os -T type -C comp -M magic "
-			 "-a addr -e ep -n name -d data_file[:data_file...] image\n"
+			 "-a addr -e ep -n name -S squashfs_file -d data_file[:data_file...] image\n"
 			 "          -A ==> set architecture to 'arch'\n"
 			 "          -O ==> set operating system to 'os'\n"
 			 "          -T ==> set image type to 'type'\n"
@@ -644,7 +689,8 @@ static void usage(void)
 			 "          -a ==> set load address to 'addr' (hex)\n"
 			 "          -e ==> set entry point to 'ep' (hex)\n"
 			 "          -n ==> set image name to 'name'\n"
-			 "          -d ==> use image data from 'datafile'\n"
+			 "          -S ==> set squashfs blob file to 'squashfs_file'\n"
+			 "          -d ==> use image data from 'data_file'\n"
 			 "          -x ==> set XIP (execute in place)\n",
 		params.cmdname);
 	fprintf(stderr, "       %s [-D dtc_options] [-f fit-image.its|-F] fit-image\n",
@@ -666,3 +712,4 @@ static void usage(void)
 
 	exit (EXIT_FAILURE);
 }
+
